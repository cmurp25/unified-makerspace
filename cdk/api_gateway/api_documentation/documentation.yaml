openapi: 3.0.0

info:
  title: User Management and Data Tracking API
  description: |
    API for managing users, visits, equipment usage, and qualifications. Regarding
    the usage of this API, there is one non-standard implementation that should be
    noted. The way POST methods work are as follows: the first POST guarantees a
    new object will be created and stored; successive POSTs are subject to error
    in two cases. 1) If the table does NOT store request body provided timestamps:
    POST will fail if an entry with a UserID already exists. 2) If the table DOES
    store request body provided timestamps: POST will fail if an entry with both
    the UserID and timestamp already exists. In essence, POST acts like PUT based
    on some criteria; this is design is intentional to prevent accidental data
    overwriting as the primary (and secondary) identifiers are provided by request
    bodies and not generated internally. POST methods will specify "Fails on existing
    UserID" or "Fails on existing UserID and Timestamp" if it fails to case 1 or 2
    respectively. Additionally, due to the want for consistency when storing and
    retrieving data, ALL values passed in request bodies MUST be strings. In this
    documentation, the expected data types will be listed to provide a reference
    to infer the correct data types when parsing returned data. Any fields that can
    have an empty value will declared what the string representation of that is
    in its description.
  version: "1.0.0"

servers:
  - url: https://api.cumaker.space
    description: Production api url (uses live data)
  - url: https://beta-api.cumaker.space
    description: Development api url (uses test data)

paths:
  /users:
    get:
      summary: Retrieve all user data
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000

    post:
      summary: Create a new user. Fails on existing UserID
      requestBody:
        $ref: '#/components/requestBodies/CreateUser'
      responses:
        201:
          description: Created
        400:
          $ref: '#/components/responses/BadRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000

  /users/{user_id}:
    get:
      summary: Retrieve user data for a specific user
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000

    patch:
      summary: Update data for an existing user
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      requestBody:
        $ref: '#/components/requestBodies/UpdateUser'
      responses:
        204:
          description: Updated
        400:
          $ref: '#/components/responses/BadRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000


  /visits:
    get:
      summary: Retrieve all visit data
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/StartTimestamp'
        - $ref: '#/components/parameters/EndTimestamp'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visits'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000

    post:
      summary: Create a new visit entry. Fails on existing UserID and Timestamp
      security:
        - ApiKeyAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateVisit'
      responses:
        201:
          description: Created
        400:
          $ref: '#/components/responses/BadRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000

  /visits/{user_id}:
    get:
      summary: Retrieve all visits for a specific user
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/StartTimestamp'
        - $ref: '#/components/parameters/EndTimestamp'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visits'
        400:
          $ref: '#/components/responses/BadRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000


  /equipment:
    get:
      summary: Retrieve all equipment usage data
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/StartTimestamp'
        - $ref: '#/components/parameters/EndTimestamp'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquipmentUsages'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000

    post:
      summary: Create a new equipment usage data entry. Fails on existing UserID and Timestamp
      requestBody:
        $ref: '#/components/requestBodies/CreateEquipmentUsage'
      responses:
        201:
          description: Created
        400:
          $ref: '#/components/responses/BadRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000

  /equipment/{user_id}:
    get:
      summary: Retrieve all equipment usage data for a specific user.
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/StartTimestamp'
        - $ref: '#/components/parameters/EndTimestamp'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquipmentUsages'
        400:
          $ref: '#/components/responses/BadRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000

    patch:
      summary: Update data in an existing equipment usage data entry. Specify the timestamp field to get a specific entry, or leave it blank to get the data entry with the latest timestamp.
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      requestBody:
        $ref: '#/components/requestBodies/UpdateEquipmentUsage'
      responses:
        204:
          description: Updated
        400:
          $ref: '#/components/responses/BadRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000


  /qualifications:
    get:
      summary: Retrieve all qualification data
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/StartTimestamp'
        - $ref: '#/components/parameters/EndTimestamp'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Qualifications'
        400:
          $ref: '#/components/responses/BadRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000

    post:
      summary: Create a new qualification entry for a user. Fails on existing UserID
      security:
        - ApiKeyAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateQualifications'
      responses:
        201:
          description: Created
        400:
          $ref: '#/components/responses/BadRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000

  /qualifications/{user_id}:
    get:
      summary: Retrieve qualification data for a specific user
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Qualification'
        400:
          $ref: '#/components/responses/BadRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000

    patch:
      summary: Update a qualification entry for a user. Unique items included in any completable item field are appended to that field. Any duplicate completable item is disregarded within that given field.
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      requestBody:
        $ref: '#/components/requestBodies/UpdateQualifications'
      responses:
        204:
          description: Updated
        400:
          $ref: '#/components/responses/BadRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:944207523762:function:beta-api-handler/invocations
        payloadFormatVersion: "1.0"
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000

components:
  schemas:
    alphaNumeric:
      description: A string defined to only be valid for alphanumeric strings.
      type: string
      pattern: "^[a-zA-Z0-9]*$"

    username:
      description: The unique name a user should be referenced as. Currently the User ID
      $ref: '#/components/schemas/alphaNumeric'
      minLength: 2

    timestamp:
      description: A timestamp in date-time format (YYYY-MM-DDThh:mm:ss) in EST.
      type: string
      format: date-time

    location:
      description: An enum of strings containing the values of all CU Makerspace locations.
      type: string
      enum:
        - "Watt"
        - "Cooper"
        - "CUICAR"

    completableItem:
      description: An object containing the name of a completable item (e.g., training or waiver) and the current completion status.
      type: object
      properties:
        name:
          description: The name of the completable item.
          type: string
          minLength: 1
        completion_status:
          description: The current status of the completable item.
          type: string
          enum:
            - "Complete"
            - "Incomplete"

    displacement_volume:
      description: The displacement volume (in mL) of an object.
      type: number
      format: double
      minimum: 0

    printDuration:
      description: The duration of a 3d print in minutes.
      type: integer
      minimum: 0

    universityStatus:
      description: A string relating to one of the possible university statuses.
      type: string
      enum:
        - "Undergraduate"
        - "Graduate"
        - "Faculty"

    undergraduateClass:
      description: An enum of strings of undergraduate classes.
      type: string
      enum:
        - "Freshman"
        - "Sophomore"
        - "Junior"
        - "Senior"

    Printer3DInfo:
      type: object
      properties:
        printer_name:
          description: The name of the printer used.
          type: string
          minLength: 1
        print_name:
          description: A name for the printed object.
          type: string
          minLength: 1
        print_duration:
          $ref: '#/components/schemas/printDuration'
        print_mass:
          description: |
            The actual mass of the print in grams. Use an empty string to specify an unknown mass.
          type: number
          format: double
          minimum: 0
        print_mass_estimate:
          description: |
            The expected mass of the print in grams.
          type: number
          format: double
          minimum: 0
        resin_volume:
          $ref: '#/components/schemas/displacement_volume'
        resin_type:
          description: The type of resin used in the print.
          type: string
          minLength: 1
        print_status:
          description: An enum of strings of possible print statuses.
          enum:
            - "In Progress"
            - "Success"
            - "Failure"
        print_notes:
          description: Notes about the print.
          type: string
      required:
        - printer_name
        - print_name
        - print_duration
        - print_status
      anyOf:
        - required:
          - print_mass_estimate
          - print_mass
        - required:
          - resin_volume
          - resin_type

    major:
      description: A major an undergraduate can study.
      type: string
      enum:
        - "Accounting"
        - "African-American/Black Studies"
        - "Agricultural and Extension Education Services"
        - "Agricultural Business and Management, General"
        - "Agricultural Economics"
        - "Agricultural Engineering"
        - "Agricultural Teacher Education"
        - "Agriculture, Agriculture Operations, and Related Sciences"
        - "Agriculture, Agriculture Operations, and Related Sciences, Other"
        - "Animal Genetics"
        - "Animal Physiology"
        - "Animal Sciences, General"
        - "Anthropology"
        - "Applied Behavior Analysis"
        - "Applied Horticulture/Horticulture Operations, General"
        - "Aquaculture"
        - "Architectural and Building Sciences/Technology"
        - "Architecture"
        - "Architecture and Related Services"
        - "Area, Ethnic, Cultural, Gender, and Group Studies"
        - "Art/Art Studies, General"
        - "Behavioral Sciences"
        - "Biochemistry"
        - "Bioengineering and Biomedical Engineering"
        - "Biological and Biomedical Sciences"
        - "Biology/Biological Sciences, General"
        - "Business Administration and Management, General"
        - "Business Administration, Management and Operations, Other"
        - "Business, Management, Marketing, and Related Support Services"
        - "Ceramic Sciences and Engineering"
        - "Chemical Engineering"
        - "Chemistry, General"
        - "Chemistry, Other"
        - "City/Urban, Community and Regional Planning"
        - "Civil Engineering, General"
        - "Communication and Media Studies, Other"
        - "Communication, Journalism, and Related Programs"
        - "Community Psychology"
        - "Computational Science"
        - "Computer and Information Sciences and Support Services"
        - "Computer and Information Sciences, General"
        - "Computer Engineering, General"
        - "Computer Programming/Programmer, General"
        - "Construction Management"
        - "Counselor Education/School Counseling and Guidance Services"
        - "Criminology"
        - "Crisis/Emergency/Disaster Management"
        - "Curriculum and Instruction"
        - "Early Childhood Education and Teaching"
        - "Economics, General"
        - "Education"
        - "Education, General"
        - "Education, Other"
        - "Educational Assessment, Evaluation, and Research, Other"
        - "Educational Leadership and Administration, General"
        - "Educational/Instructional Technology"
        - "Electrical and Electronics Engineering"
        - "Elementary Education and Teaching"
        - "Engineering"
        - "Engineering Technologies and Engineering-Related Fields"
        - "Engineering, General"
        - "Engineering, Other"
        - "Engineering-Related Fields, Other"
        - "English Language and Literature, General"
        - "English Language and Literature/letters"
        - "Entomology"
        - "Environmental Design/Architecture"
        - "Environmental/Environmental Health Engineering"
        - "Epidemiology"
        - "Family and Community Services"
        - "Family and Consumer Sciences/human Sciences"
        - "Film/Cinema/Video Studies"
        - "Finance, General"
        - "Food Science"
        - "Food Science and Technology, Other"
        - "Foreign Languages and Literatures, General"
        - "Foreign Languages, Literatures, and Linguistics"
        - "Foreign Languages, Literatures, and Linguistics, Other"
        - "Forest Management/Forest Resources Management"
        - "Forest Sciences and Biology"
        - "General Studies"
        - "Genome Sciences/Genomics"
        - "Geological and Earth Sciences/Geosciences, Other"
        - "Geology/Earth Science, General"
        - "Health Communication"
        - "Health Professions and Related Clinical Sciences, Other"
        - "Health Professions and Related Programs"
        - "Historic Preservation and Conservation"
        - "History"
        - "History, General"
        - "Homeland Security"
        - "Homeland Security, Law Enforcement, Firefighting and Related Protective Services"
        - "Horticultural Science"
        - "Human Development, Family Studies, and Related Services, Other"
        - "Human Resources Management/Personnel Administration, General"
        - "Human/Medical Genetics"
        - "Industrial and Organizational Psychology"
        - "Industrial and Product Design"
        - "Industrial Engineering"
        - "Informatics"
        - "Information Science/Studies"
        - "International Public Health/International Health"
        - "Junior High/Intermediate/Middle School Education and Teaching"
        - "Landscape Architecture"
        - "Learning Sciences"
        - "Liberal Arts and Sciences, General Studies and Humanities"
        - "Manufacturing Engineering"
        - "Marketing, Other"
        - "Marketing/Marketing Management, General"
        - "Materials Engineering"
        - "Mathematics and Statistics"
        - "Mathematics Teacher Education"
        - "Mathematics, General"
        - "Mechanical Engineering"
        - "Medical Informatics"
        - "Medical Scientist"
        - "Microbiology, General"
        - "Multi-/interdisciplinary Studies, General"
        - "Natural Resources and Conservation"
        - "Natural Resources/Conservation, General"
        - "Non-Profit/Public/Organizational Management"
        - "Nursing Administration"
        - "Nursing Practice"
        - "Nursing Science"
        - "Operations Management and Supervision"
        - "Optics/Optical Sciences"
        - "Organizational Leadership"
        - "Packaging Science"
        - "Parks, Recreation and Leisure Facilities Management, General"
        - "Parks, Recreation and Leisure Studies"
        - "Parks, Recreation, Leisure, and Fitness Studies"
        - "Philosophy"
        - "Philosophy and Religious Studies"
        - "Physical Sciences"
        - "Physics, General"
        - "Plant Sciences, General"
        - "Political Science and Government, General"
        - "Pre-Dentistry Studies"
        - "Pre-Medicine/Pre-Medical Studies"
        - "Pre-Pharmacy Studies"
        - "Professional, Technical, Business, and Scientific Writing"
        - "Psychology"
        - "Psychology, General"
        - "Psychology, Other"
        - "Public Administration"
        - "Public Administration and Social Service Professions"
        - "Public Health, Other"
        - "Public Policy Analysis, General"
        - "Reading Teacher Education"
        - "Real Estate"
        - "Registered Nursing/Registered Nurse"
        - "Religion/Religious Studies"
        - "Rhetoric and Composition"
        - "Science Teacher Education/General Science Teacher Education"
        - "Secondary Education and Teaching"
        - "Selling Skills and Sales Operations"
        - "Sign Language Interpretation and Translation"
        - "Social Sciences"
        - "Social Sciences, Other"
        - "Sociology"
        - "Soil Sciences, Other"
        - "Spanish Language and Literature"
        - "Special Education and Teaching, General"
        - "Speech Communication and Rhetoric"
        - "Sport and Fitness Administration/Management"
        - "Sports Communication"
        - "Systems Engineering"
        - "Teacher Education and Professional Development, Specific Subject Areas, Other"
        - "Technology Teacher Education/Industrial Arts Teacher Education"
        - "Toxicology"
        - "Trade and Industrial Teacher Education"
        - "Transportation/Mobility Management"
        - "Visual and Performing Arts"
        - "Visual and Performing Arts, Other"
        - "Wildlife, Fish and Wildlands Science and Management"
        - "Women's Studies"

    UserProperties:
      description: An object containing a user's information. If the universityStatus is "Undergraduate", then the major and undergraduateClass fields are required.
      type: object
      properties:
        university_status:
          $ref: '#/components/schemas/universityStatus'
        major:
          $ref: '#/components/schemas/major'
        undergraduate_class:
          $ref: '#/components/schemas/undergraduateClass'

    UserRequiredProperties:
      type: object
      required:
        - user_id
        - university_status
      anyOf:
        - required:
          - major
          - undergraduate_class
        - required:
          - major

    UserID:
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/username'

    User:
      allOf:
        - $ref: '#/components/schemas/UserID'
        - $ref: '#/components/schemas/UserProperties'
        - $ref: '#/components/schemas/UserRequiredProperties'

    Users:
      description: A collection of User objects
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    VisitProperties:
      description: An object containing visit information.
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/timestamp'
        location:
          $ref: '#/components/schemas/location'

    VisitRequiredProperties:
      required:
        - user_id
        - timestamp
        - location

    Visit:
      allOf:
        - $ref: '#/components/schemas/UserID'
        - $ref: '#/components/schemas/VisitProperties'
        - $ref: '#/components/schemas/VisitRequiredProperties'

    Visits:
      description: A collection of Visit objects
      type: object
      properties:
        visits:
          type: array
          items:
            $ref: '#/components/schemas/Visit'

    EquipmentUsageProperties:
      description: An object containing equipment usage data. If the project type is "class", the class_number, faculty_name, and project_sponsor fields are required. If the project type is club, the organization_affiliation field is required. If the equipment type is "FDM 3D Printer (Plastic)" or "SLA 3D Printer (Resin)", then the printer_3d_info field is required.
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/timestamp'
        location:
          $ref: '#/components/schemas/location'
        project_name:
          description: The name of the project.
          type: string
        project_type:
          description: The type of project. A string enum value.
          type: string
          enum: ["Personal", "Class", "Club"]
        class_number:
          type: string
          pattern: "^[A-Z]{4}-[0-9]{4}$"
        faculty_name:
          type: string
          minLength: 1
        project_sponsor:
          type: string
          minLength: 1
        organization_affiliation:
          type: string
          minLength: 1
        equipment_type:
          type: string
          enum:
            - "FDM 3D Printer (Plastic)"
            - "SLA 3D Printer (Resin)"
            - "Laser Engraver"
            - "Glowforge"
            - "Fabric Printer"
            - "Vinyl Cutter"
            - "Button Maker"
            - "3D Scanner"
            - "Hand Tools"
            - "Sticker Printer"
            - "Embroidery Machine"
        printer_3d_info:
          $ref: '#/components/schemas/Printer3DInfo'

    EquipmentUsageRequiredProperties:
      required:
        - user_id
        - timestamp
        - location
        - project_name
        - project_type
        - equipment_type
      anyOf:
        - required:
          - class_number
          - faculty_name
          - project_sponsor
        - required:
          - organization_affiliation
        - required:
          - printer_3d_info

    EquipmentUsage:
      allOf:
        - $ref: '#/components/schemas/UserID'
        - $ref: '#/components/schemas/EquipmentUsageProperties'
        - $ref: '#/components/schemas/EquipmentUsageRequiredProperties'

    EquipmentUsages:
      description: A collection of EquipmentUsage objects
      type: object
      properties:
        equipment_logs:
          type: array
          items:
            $ref: '#/components/schemas/EquipmentUsage'

    QualificationsProperties:
      description: An object containing qualification information about a user. Completable items quantified by having "training" (case insensitive) should be classified as belonging to the "trainings" array. Completable items quantified by having "waiver" (case insensitive) should be classified as belonging to the "waivers" array. All other completable items should be classified as belonging to the "miscellaneous" array.
      type: object
      properties:
        last_updated:
          description: A timestamp for the last time the data was changed.
          $ref: '#/components/schemas/timestamp'
        trainings:
          description: An array of training courses and the user’s completion status of them.
          type: array
          items:
            $ref: '#/components/schemas/completableItem'
        waivers:
          description: An array of waivers and the user’s completion status of them.
          type: array
          items:
            $ref: '#/components/schemas/completableItem'
        miscellaneous:
          description: An array of miscellaneous courses and the user’s completion status of them.
          type: array
          items:
            $ref: '#/components/schemas/completableItem'


    QualificationsRequiredProperties:
      required:
        - user_id
        - last_updated
        - trainings
        - waivers
        - miscellaneous

    Qualification:
      allOf:
        - $ref: '#/components/schemas/UserID'
        - $ref: '#/components/schemas/QualificationsProperties'
        - $ref: '#/components/schemas/QualificationsRequiredProperties'

    Qualifications:
      description: A collection of Qualification objects
      type: object
      properties:
        qualifications:
          type: array
          items:
            $ref: '#/components/schemas/Qualification'


  parameters:
    UserID:
      name: user_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/UserID'

    EndTimestamp:
      name: end_timestamp
      in: query
      description: Used to query for results with timestamps less than or equal to end_timestamp. If used alongside start_timestamp, it MUST be greater than or equal to it.
      schema:
        $ref: '#/components/schemas/timestamp'

    StartTimestamp:
      name: start_timestamp
      in: query
      description: Used to query for results with timestamps greater than or equal to start_timestamp. If used alongside end_timestamp, it MUST be less than or equal to it.
      schema:
        $ref: '#/components/schemas/timestamp'

    Limit:
      name: limit
      in: query
      description: The maximum number of results to return from a table scan/query.
      schema:
        type: integer
        minimum: 1

  requestBodies:
    CreateUser:
      description: Create a new user information table entry.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    UpdateUser:
      description: Update an equipment usage entry. Changed fields are required to exhibit any documented required field sets (e.g., changing university_status from Employee->Undergraduate means the major and undergraduate_class must be defined in the request body). The user_id field will NEVER be changed, even if it is provided in the request body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserProperties'

    CreateVisit:
      description: Create a new visit table entry.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Visit'

    CreateEquipmentUsage:
      description: Create a new equipment usage table entry.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EquipmentUsage'

    UpdateEquipmentUsage:
      description: Update an equipment usage entry. Changed fields are required to exhibit any documented required field sets (e.g., changing equipment_type from "Laser Engraver"->"3D Printer" means a printer_3d_info object must be provided in the request body). The user_id and timestamp fields will NEVER be changed, even if they are provided in the request body. If the timestamp field is not provided, the latest entry in the equipment usage table for the user will be updated instead.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EquipmentUsageProperties'

    CreateQualifications:
      description: Create a new qualifications table entry. The last_updated field will always be managed by the server, and will never change to a value provided in a request body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Qualification'

    UpdateQualifications:
      description: Update a qualifications entry. It is required when updating any object that is an array of completable items that the request array contains all existing keys. Changed values of existing keys and any new key:value pairs will be added. The user_id field will NEVER be changed, even if it is provided in the request body. The last_updated field will always be managed by the server, and will never change to a value provided in a request body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QualificationsProperties'


  responses:
    BadRequest:
      description: A response body to return when the user makes a bad request or doesn't supply an appropriate request body.
      content:
        application/json:
          schema:
            type: object
            properties:
              errorMsg:
                description: A message describing what was wrong with the request.
                type: string


  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: x-api-key
      in: header
